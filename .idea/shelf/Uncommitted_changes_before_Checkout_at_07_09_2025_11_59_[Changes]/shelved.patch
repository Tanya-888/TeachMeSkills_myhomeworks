Index: home/w/13.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># занятие 13     задание 1\r\n\r\n\r\ndef fibonacci(n):\r\n    a, b = 0, 1\r\n    for _ in range(n):\r\n        yield a\r\n        a, b = b, a + b\r\n\r\nnum = int(input(\"Введите номер числа Фибоначчи, до которого нужно вывести последовательность: \"))\r\n\r\n# Вывод\r\nfor fib_num in fibonacci(num):\r\n    print(fib_num)\r\n\r\n\r\n\r\n\r\n# задание 2\r\n\r\ndef cyclic_sequence():\r\n    numbers = [1, 2, 3]\r\n    i = 0\r\n    while True:\r\n        yield numbers[i]\r\n        i = (i + 1) % len(numbers)\r\n\r\ndef main():\r\n    n = int(input(\"Введите количество чисел: \"))\r\n    gen = cyclic_sequence()\r\n    for _ in range(n):\r\n        print(next(gen), end=' ')\r\n    print()\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n\r\n\r\n\r\n\r\n# задание 3\r\n\r\n# Класс Pizza с атрибутами\r\nclass Pizza:\r\n    def __init__(self, size, cheese=False, pepperoni=False, mushrooms=False, onions=False, bacon=False):\r\n        self.size = size\r\n        self.cheese = cheese\r\n        self.pepperoni = pepperoni\r\n        self.mushrooms = mushrooms\r\n        self.onions = onions\r\n        self.bacon = bacon\r\n\r\n    def __str__(self):\r\n        toppings = []\r\n        if self.cheese:\r\n            toppings.append(\"cheese\")\r\n        if self.pepperoni:\r\n            toppings.append(\"pepperoni\")\r\n        if self.mushrooms:\r\n            toppings.append(\"mushrooms\")\r\n        if self.onions:\r\n            toppings.append(\"onions\")\r\n        if self.bacon:\r\n            toppings.append(\"bacon\")\r\n        toppings_str = \", \".join(toppings) if toppings else \"no toppings\"\r\n        return f\"Pizza(size={self.size}, toppings={toppings_str})\"\r\n\r\n\r\n# Класс PizzaBuilder для создания пиццы\r\nclass PizzaBuilder:\r\n    def __init__(self, size):\r\n        self.size = size\r\n        self.cheese = False\r\n        self.pepperoni = False\r\n        self.mushrooms = False\r\n        self.onions = False\r\n        self.bacon = False\r\n\r\n    def add_cheese(self):\r\n        self.cheese = True\r\n        return self\r\n\r\n    def add_pepperoni(self):\r\n        self.pepperoni = True\r\n        return self\r\n\r\n    def add_mushrooms(self):\r\n        self.mushrooms = True\r\n        return self\r\n\r\n    def add_onions(self):\r\n        self.onions = True\r\n        return self\r\n\r\n    def add_bacon(self):\r\n        self.bacon = True\r\n        return self\r\n\r\n    def build(self):\r\n        return Pizza(\r\n            size=self.size,\r\n            cheese=self.cheese,\r\n            pepperoni=self.pepperoni,\r\n            mushrooms=self.mushrooms,\r\n            onions=self.onions,\r\n            bacon=self.bacon\r\n        )\r\n\r\n\r\n# Класс PizzaDirector управляет процессом создания пиццы\r\nclass PizzaDirector:\r\n    def __init__(self, builder):\r\n        self.builder = builder\r\n\r\n    def make_pizza(self):\r\n        #  создаём пиццу с сыром, пепперони и беконом\r\n        return self.builder.add_cheese().add_pepperoni().add_bacon().build()\r\n\r\n\r\n# Пример\r\nif __name__ == \"__main__\":\r\n    builder = PizzaBuilder(size=\"Large\")\r\n    director = PizzaDirector(builder)\r\n    pizza = director.make_pizza()\r\n    print(pizza)\r\n\r\n# задание 4\r\n\r\nfrom abc import ABC, abstractmethod\r\n\r\n# Абстрактный класс Animal с абстрактным методом speak\r\nclass Animal(ABC):\r\n    @abstractmethod\r\n    def speak(self):\r\n        pass\r\n\r\n# Класс Dog, наследник Animal\r\nclass Dog(Animal):\r\n    def speak(self):\r\n        return \"Aff\"\r\n\r\n# Класс Cat, наследник Animal\r\nclass Cat(Animal):\r\n    def speak(self):\r\n        return \"Meow\"\r\n\r\n# Фабрика для создания объектов Animal\r\nclass AnimalFactory:\r\n    def create_animal(self, animal_type: str) -> Animal:\r\n        if animal_type.lower() == \"dog\":\r\n            return Dog()\r\n        elif animal_type.lower() == \"cat\":\r\n            return Cat()\r\n        else:\r\n            raise ValueError(f\"Unknown animal type: {animal_type}\")\r\n\r\n# Пример\r\nfactory = AnimalFactory()\r\n\r\ndog = factory.create_animal(\"dog\")\r\nprint(dog.speak())\r\n\r\ncat = factory.create_animal(\"cat\")\r\nprint(cat.speak())\r\n\r\n\r\n\r\n# задание 5\r\n\r\n# Интерфейс стратегии (необязательно, просто для понимания)\r\nclass Operation:\r\n    def execute(self, a, b):\r\n        pass\r\n\r\n# Конкретные стратегии\r\nclass Addition(Operation):\r\n    def execute(self, a, b):\r\n        return a + b\r\n\r\nclass Subtraction(Operation):\r\n    def execute(self, a, b):\r\n        return a - b\r\n\r\nclass Multiplication(Operation):\r\n    def execute(self, a, b):\r\n        return a * b\r\n\r\nclass Division(Operation):\r\n    def execute(self, a, b):\r\n        if b == 0:\r\n            return \"Ошибка: деление на ноль запрещено\"\r\n        return a / b\r\n\r\n# Класс Calculator\r\nclass Calculator:\r\n    def __init__(self, strategy: Operation):\r\n        self.strategy = strategy\r\n\r\n    def set_strategy(self, strategy: Operation):\r\n        self.strategy = strategy\r\n\r\n    def calculate(self, a, b):\r\n        return self.strategy.execute(a, b)\r\n\r\n\r\n# Пример\r\nif __name__ == \"__main__\":\r\n    calc = Calculator(Addition())\r\n    print(calc.calculate(10, 5))  # 15\r\n\r\n    calc.set_strategy(Subtraction())\r\n    print(calc.calculate(10, 5))  # 5\r\n\r\n    calc.set_strategy(Multiplication())\r\n    print(calc.calculate(10, 5))  # 50\r\n\r\n    calc.set_strategy(Division())\r\n    print(calc.calculate(10, 5))  # 2.0\r\n    print(calc.calculate(10, 0))  #  деление на ноль
===================================================================
diff --git a/home/w/13.py b/home/w/13.py
--- a/home/w/13.py	(revision 4382a029803d67db98014ea46184a84282c52bf7)
+++ b/home/w/13.py	(date 1757235404962)
@@ -202,7 +202,6 @@
     def calculate(self, a, b):
         return self.strategy.execute(a, b)
 
-
 # Пример
 if __name__ == "__main__":
     calc = Calculator(Addition())
